#!/usr/bin/python# -*- coding: UTF-8 -*-# Python 基础 #'''数据类型''''''字符串a = 'ABC'print ("a=123"+a)''''''floatb = 12.5print (b)''''''字符串编码以及拼接print ('%d-%02d' % (3, 4))print ('%.2f' % 3.141592653)print ('Hello,{0},成绩提升了 {1:.1f}%'.format('张三',13.45321))''''''列表-list (有序的  集合 可变)'''fruitType = ['Bananer', 'Orange', 'Apple']# fruitType.append('Drangoneye') //添加元素# fruitType.insert(2,'Mangol')  //将元素插入指定位置# fruitType.pop(1)              //移除某个元素# fruitType[0] = 'Tomato'       //替换某个元素'print (fruitType)'# Python支持多维数组iOS = ['Objective-C', 'Swift']DevLa = ['Java', 'Python', iOS, 'php', 'C++']'print (len(DevLa))''''元组-tuple (有序的  列表 不可变)'''# tuple(元组)  在定义时必须确定tuple中的元素# 定义只有一个元素的tuple(元组)时，要添加一个‘,’ 表示这是一个元组 不是常量Develop = ('Python',)'print (Develop[0])'# 当tuple(元组)中包含list(列表)时，可以改变list中的元素值使tuple改变，此时tuple中的list指向的内存没有变化，因此tuple还是不变的''' 条件判断(if...elif...else)# 每一个判断条件之后都需要加上 “：”age = 21if age >= 22:    print ('晚婚')else:    print ('早婚') ''''''birth = input('birth:')birth = int(birth)if birth < 1990:    print ('90前')elif birth < 2000:    print ('90后')elif birth < 2010:    print ('00后')else:    print ('无法统计')'''''' 循环 # for..in 多用于将list,tuple迭代出来names = ['James', 'Mike', 'Tony']for name in names:    print (name)# 求1-100的整数和Sum = 0for x in range(101):    Sum = Sum + xprint ('1-100的整数和为： %s' % Sum)# range() 是Python提供的一个函数，可以生成一个整数数列# while 只要条件满足，就会一直循环，当条件不满足时退出循环n = 10m = 0while n > 0:    if n < 6:        break   # break  直接结束当前循环    m = m + n    if m % 2 != 0:        continue   # continue 跳过当前循环 直接进行下一轮循环    n = n - 1print (m)# break，continue 通常必须配合if判断语句# 注意：不要滥用 break和continue，用的多 容易造成程序执行逻辑分叉过多，甚至是死循环'''''' dict（Dictionary） '''# dict 又称为dictionary，在其他语言中又叫map或者object，使用(key-value)键值对存储，查询速度快Dictionary = {'dog': 100, 'cat': 20, 'pig': 34, 'chicken': 68}# 修改dict中的参数Dictionary['dog'] = 999# 如果dict中不存在对应的key 那么就会返回  如果使用get()方法取不存在的key 会返回None 也可以使用get()方法给不存在的key赋值get(key,value)if 'sheep' in Dictionary:    print ('sheep: %s' % Dictionary['sheep'])else:    print ('sheep not find')print (Dictionary.get('sheep'))# dict 删除某个key 使用pop()方法Dictionary.pop('cat')''' list与dict的异同： 与list相比，dict有以下特点：  1.查找和插入速度极快，不会随key的增加而变慢  2.需要占用大量的内存，浪费内存多 list则相反：  1.查找和插入的时间会随着元素的增加而变慢  2.占用空间小，浪费内存小# dict是用空间来换取时间的一种方法 ## dict中的key必须是不可变的对象 #  dict 是根据key来计算Value的存储位置，这个通过key值计算存储位置的算法叫哈希(hash)算法'''''' set(集合) '''# set和dict类似，是一组key的集合，但不存储value。由于key不能重复，因此在set中不存在相同的key''' 创建set，需要提供一个list作为输入集合 '''set1 = set([2, 4, 1, 4, 2, 6, 7, 5])# set 添加元素使用add() 可以重复添加 但是没有效果set1.add(8)# set 删除元素使用remove()set1.remove(2)# set 相当于数学中无序且无重复元素的集合，因此两个set可以做数学上的交，并等操作# set和dict唯一的区别在于没有存储对应的value，但是set和dict一样 不可以放入可变对象# 不可变的对象调用自身的任意方法都不能改变对象自身的内容，这些方法会创建出一块新的对象以及内存并返回结果